# docker-compose-extended.yml
# Extended AI Stack mit Guacamole Desktop und zusätzlichen Services
version: '3.8'

networks:
  ai-network:
    driver: bridge
    name: extended-ai-network

volumes:
  # Guacamole & Desktop
  guac_postgres_data:
  desktop_home:
  
  # Original AI Stack
  n8n_data:
  ollama_data:
  qdrant_storage:
  open_webui_data:
  supabase_db_data:
  
  # Extended Services
  appflowy_data:
  affine_data:
  gitlab_config:
  gitlab_logs:
  gitlab_data:
  gitlab_postgres_data:
  n8n_extended_data:
  redis_data:
  
  # Proxy & Config
  caddy_data:
  caddy_config:

services:
  # ===== GUACAMOLE DESKTOP STACK =====
  
  guac-postgres:
    image: postgres:15-alpine
    container_name: guac-postgres
    environment:
      POSTGRES_DB: guacamole_db
      POSTGRES_USER: guacamole_user
      POSTGRES_PASSWORD: guacamole_pass
      PGDATA: /var/lib/postgresql/data/guacamole
    volumes:
      - guac_postgres_data:/var/lib/postgresql/data
      - ./init-guacamole:/docker-entrypoint-initdb.d:ro
    networks:
      - ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U guacamole_user -d guacamole_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  guacd:
    image: guacamole/guacd:latest
    container_name: guacd
    networks:
      - ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4822"]
      interval: 30s
      timeout: 10s
      retries: 3

  guacamole:
    image: guacamole/guacamole:latest
    container_name: guacamole
    depends_on:
      guacd:
        condition: service_healthy
      guac-postgres:
        condition: service_healthy
    environment:
      GUACD_HOSTNAME: guacd
      POSTGRES_HOSTNAME: guac-postgres
      POSTGRES_DATABASE: guacamole_db
      POSTGRES_USER: guacamole_user
      POSTGRES_PASSWORD: guacamole_pass
    ports:
      - "8080:8080"
    networks:
      - ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/guacamole"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Linux Desktop mit verbesserter Konfiguration
  desktop:
    image: kasmweb/desktop:1.15.0-rolling
    container_name: linux-desktop
    environment:
      VNC_PW: password
      KASM_PORT: 6901
      # Browser und Tools pre-installieren
      KASM_RX_HOME: /home/kasm-user
      DEBIAN_FRONTEND: noninteractive
    volumes:
      - desktop_home:/home/kasm-user
      - ./desktop-shared:/shared:rw
      # Zusätzliche Konfiguration für bessere Desktop-Erfahrung
      - ./desktop-config:/home/kasm-user/.config:rw
    networks:
      - ai-network
    ports:
      - "6901:6901"
    restart: unless-stopped
    shm_size: 2gb
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6901"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== CORE AI SERVICES =====
  
  # N8N (Hauptinstanz)
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    environment:
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=supabase-db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=postgres
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_HOST=${N8N_HOSTNAME:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=Europe/Berlin
      - OLLAMA_HOST=http://ollama:11434
      - N8N_EDITOR_BASE_URL=http://localhost:5678
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./shared:/data/shared:rw
    networks:
      - ai-network
    depends_on:
      - ollama
      - qdrant
    restart: unless-stopped
    profiles:
      - cpu
      - gpu-nvidia  
      - gpu-amd

  # Ollama CPU Version
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - ai-network
    restart: unless-stopped
    profiles:
      - cpu

  # Ollama GPU NVIDIA Version
  ollama-gpu:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - ai-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - gpu-nvidia

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - ai-network
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334

  # Open WebUI
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    ports:
      - "3000:8080"
    environment:
      OLLAMA_BASE_URL: http://ollama:11434
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY:-default-secret-key}
      WEBUI_AUTH: "True"
    volumes:
      - open_webui_data:/app/backend/data
    networks:
      - ai-network
    depends_on:
      - ollama
    restart: unless-stopped

  # ===== EXTENDED PRODUCTIVITY SERVICES =====
  
  # AppFlowy (Alternative zu Notion)
  appflowy:
    image: appflowyinc/appflowy:latest
    container_name: appflowy
    ports:
      - "8081:8080"
    environment:
      - RUST_LOG=info
      - APPFLOWY_DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/appflowy
    volumes:
      - appflowy_data:/data
    networks:
      - ai-network
    restart: unless-stopped
    depends_on:
      - supabase-db

  # AFFINE (Notion-Alternative)
  affine:
    image: ghcr.io/toeverything/affine-graphql:stable
    container_name: affine
    ports:
      - "3010:3010"
      - "5555:5555"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/affine
      REDIS_SERVER_HOST: redis
      REDIS_SERVER_PORT: 6379
      AFFINE_SERVER_HOST: 0.0.0.0
      AFFINE_SERVER_PORT: 3010
    volumes:
      - affine_data:/workspace
    networks:
      - ai-network
    depends_on:
      - redis
      - supabase-db
    restart: unless-stopped

  # Redis für AFFINE und Caching
  redis:
    image: redis:7-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    networks:
      - ai-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # GitLab CE
  gitlab:
    image: gitlab/gitlab-ce:16.8.1-ce.0
    container_name: gitlab
    hostname: gitlab.local
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.local:8082'
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
        letsencrypt['enable'] = false
        # Performance-Optimierungen für kleinere Setups
        postgresql['shared_preload_libraries'] = nil
        gitlab_rails['db_host'] = 'gitlab-postgres'
        gitlab_rails['db_port'] = 5432
        gitlab_rails['db_database'] = 'gitlab'
        gitlab_rails['db_username'] = 'gitlab'
        gitlab_rails['db_password'] = 'gitlab_password'
        # Reduziere Arbeitsprozesse für kleinere Umgebungen
        unicorn['worker_processes'] = 2
        sidekiq['max_concurrency'] = 10
    ports:
      - "8082:8082"
      - "2222:22"
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
    networks:
      - ai-network
    depends_on:
      - gitlab-postgres
    restart: unless-stopped
    shm_size: 256m

  # GitLab PostgreSQL
  gitlab-postgres:
    image: postgres:15-alpine
    container_name: gitlab-postgres
    environment:
      POSTGRES_DB: gitlab
      POSTGRES_USER: gitlab
      POSTGRES_PASSWORD: gitlab_password
      PGDATA: /var/lib/postgresql/data
    volumes:
      - gitlab_postgres_data:/var/lib/postgresql/data
    networks:
      - ai-network
    restart: unless-stopped

  # N8N Extended (zusätzliche Instanz für spezielle Workflows)
  n8n-extended:
    image: n8nio/n8n:latest
    container_name: n8n-extended
    environment:
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - N8N_HOST=n8n-extended.local
      - N8N_PORT=5678
      - WEBHOOK_URL=http://localhost:5679/
      - GENERIC_TIMEZONE=Europe/Berlin
      - OLLAMA_HOST=http://ollama:11434
    ports:
      - "5679:5678"
    volumes:
      - n8n_extended_data:/home/node/.n8n
      - ./shared:/data/shared:rw
    networks:
      - ai-network
    restart: unless-stopped

  # ===== SUPABASE STACK (Essential Components) =====
  
  # Supabase Database
  supabase-db:
    image: supabase/postgres:15.1.1.78
    container_name: supabase-db
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10
    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
      - -c
      - log_min_messages=fatal
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: 5432
      POSTGRES_PORT: 5432
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: postgres
      POSTGRES_DB: postgres
    volumes:
      - supabase_db_data:/var/lib/postgresql/data
    networks:
      - ai-network

  # Supabase Kong API Gateway
  supabase-kong:
    image: kong:2.8.1
    container_name: supabase-kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    ports:
      - "8000:8000"
    networks:
      - ai-network

  # ===== REVERSE PROXY =====
  
  caddy:
    image: caddy:2.7-alpine
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./Caddyfile:/etc/caddy/Caddyfile
    networks:
      - ai-network
    environment:
      - GUACAMOLE_HOST=guacamole:8080
      - N8N_HOST=n8n:5678
      - WEBUI_HOST=open-webui:8080
      - APPFLOWY_HOST=appflowy:8080
      - AFFINE_HOST=affine:3010
      - GITLAB_HOST=gitlab:8082
    depends_on:
      - guacamole
      - n8n
      - open-webui
