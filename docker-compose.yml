# docker-compose.yml - Integriert mit Editor-Auswahl
version: "3.8"

networks:
  localai:
    driver: bridge
    name: localai
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Core AI Stack
  n8n_storage:
  ollama_storage:
  qdrant_storage:
  open_webui_data:

  # Supabase Stack
  supabase_db_data:
  langfuse_postgres_data:
  langfuse_clickhouse_data:
  langfuse_minio_data:
  valkey_data:

  # Desktop Environment mit Editor-Support
  desktop_home:
  desktop_config:
  guacamole_postgres_data:

  # Productivity Stack
  appflowy_data:
  affine_data:
  gitlab_config:
  gitlab_logs:
  gitlab_data:

  # Shared Data
  shared_data:

x-common-env: &common-env
  networks:
    - localai
  restart: unless-stopped

services:
  # ===== BROWSER GATEWAY =====

  guacamole-db:
    <<: *common-env
    image: postgres:15-alpine
    container_name: guacamole-db
    environment:
      POSTGRES_DB: guacamole_db
      POSTGRES_USER: guacamole_user
      POSTGRES_PASSWORD: ${GUAC_POSTGRES_PASSWORD}
    volumes:
      - guacamole_postgres_data:/var/lib/postgresql/data
      - ./guacamole/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U guacamole_user -d guacamole_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  guacd:
    <<: *common-env
    image: guacamole/guacd:latest
    container_name: guacd

  guacamole:
    <<: *common-env
    image: guacamole/guacamole:latest
    container_name: guacamole
    depends_on:
      guacd:
        condition: service_started
      guacamole-db:
        condition: service_healthy
    environment:
      GUACD_HOSTNAME: guacd
      POSTGRES_HOSTNAME: guacamole-db
      POSTGRES_DATABASE: guacamole_db
      POSTGRES_USER: guacamole_user
      POSTGRES_PASSWORD: ${GUAC_POSTGRES_PASSWORD}
    ports:
      - "8080:8080" # EINZIGER exponierter Port

  # ===== ENHANCED DESKTOP ENVIRONMENT =====

  desktop:
    <<: *common-env
    # Custom Desktop-Image für Editor-Integration
    build:
      context: ./desktop
      dockerfile: Dockerfile.desktop
      args:
        - SELECTED_EDITOR=${SELECTED_EDITOR:-zed}
    container_name: desktop
    environment:
      VNC_PW: ${DESKTOP_PASSWORD:-password}
      KASM_PORT: 6901
      # Desktop-Optimierungen
      KASM_RX_HOME: /home/kasm-user
      DEBIAN_FRONTEND: noninteractive
      TZ: ${DESKTOP_TIMEZONE:-Europe/Berlin}
      LANG: de_DE.UTF-8
      # Editor-Auswahl weitergeben
      SELECTED_EDITOR: ${SELECTED_EDITOR:-zed}
    volumes:
      - desktop_home:/home/kasm-user
      - desktop_config:/home/kasm-user/.config
      - shared_data:/shared
      # Editor-Konfigurationen
      - ./desktop/editor-config:/shared/editor-config:ro
      # Projekte und Scripts
      - ./desktop/projects:/home/kasm-user/Projects
      - ./desktop/scripts:/home/kasm-user/Scripts
    shm_size: 4gb # Mehr Memory für Editoren
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    depends_on:
      - n8n
      - open-webui
      - ollama

  # ===== CORE AI SERVICES =====

  ollama:
    <<: *common-env
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ollama_storage:/root/.ollama
    environment:
      OLLAMA_CONTEXT_LENGTH: 8192
      OLLAMA_HOST: 0.0.0.0
    profiles: ["cpu"]

  ollama-gpu:
    <<: *common-env
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ollama_storage:/root/.ollama
    environment:
      OLLAMA_CONTEXT_LENGTH: 8192
      OLLAMA_HOST: 0.0.0.0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles: ["gpu-nvidia"]

  n8n:
    <<: *common-env
    image: n8nio/n8n:latest
    container_name: n8n
    environment:
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_DATABASE=postgres
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - WEBHOOK_URL=http://n8n:5678/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-Europe/Berlin}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      # Editor-Integration für N8N-Workflows
      - N8N_EDITOR_BASE_URL=http://n8n:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - shared_data:/data/shared
      # N8N-Templates für Editor-Integration
      - ./n8n/templates:/data/templates:ro
    depends_on:
      - db
      - ollama

  open-webui:
    <<: *common-env
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    environment:
      OLLAMA_BASE_URL: http://ollama:11434
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY:-default-secret}
      WEBUI_AUTH: "True"
      ENABLE_SIGNUP: "True"
      # Editor-Integration
      ENABLE_RAG_WEB_SEARCH: "True"
      ENABLE_RAG_WEB_LOADER: "True"
    volumes:
      - open_webui_data:/app/backend/data
    depends_on:
      - ollama

  qdrant:
    <<: *common-env
    image: qdrant/qdrant:latest
    container_name: qdrant
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334

  # ===== SUPABASE STACK =====

  db:
    <<: *common-env
    image: supabase/postgres:15.1.1.78
    container_name: supabase-db
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: 5432
      POSTGRES_PORT: 5432
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: postgres
      POSTGRES_DB: postgres
    volumes:
      - supabase_db_data:/var/lib/postgresql/data
      # SQL-Dateien für Editor-Integration
      - ./database/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10

  kong:
    <<: *common-env
    image: kong:2.8.1
    container_name: supabase-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
    volumes:
      - ./supabase/docker/volumes/api/kong.yml:/var/lib/kong/kong.yml:ro

  # ===== PRODUCTIVITY STACK =====

  appflowy:
    <<: *common-env
    image: appflowyinc/appflowy:latest
    container_name: appflowy
    environment:
      APPFLOWY_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/appflowy
    volumes:
      - appflowy_data:/data
    depends_on:
      - db
    profiles: ["productivity"]

  affine:
    <<: *common-env
    image: ghcr.io/toeverything/affine-graphql:stable
    container_name: affine
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/affine
      REDIS_SERVER_HOST: redis
      REDIS_SERVER_PORT: 6379
      AFFINE_SERVER_HOST: 0.0.0.0
      AFFINE_SERVER_PORT: 3010
    volumes:
      - affine_data:/workspace
    depends_on:
      - db
      - redis
    profiles: ["productivity"]

  redis:
    <<: *common-env
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - valkey_data:/data
    profiles: ["productivity", "development"]

  # ===== DEVELOPMENT STACK =====

  gitlab:
    <<: *common-env
    image: gitlab/gitlab-ce:16.8.1-ce.0
    container_name: gitlab
    hostname: gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab:8082'
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
        letsencrypt['enable'] = false
        # Performance für kleinere Setups
        unicorn['worker_processes'] = 2
        sidekiq['max_concurrency'] = 10
        # Editor-Integration aktivieren
        gitlab_rails['webhook_timeout'] = 30
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
    shm_size: 256m
    profiles: ["development"]

  # ===== LANGFUSE (OBSERVABILITY) =====

  langfuse-web:
    <<: *common-env
    image: langfuse/langfuse:3
    container_name: langfuse
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      NEXTAUTH_URL: http://langfuse:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      SALT: ${LANGFUSE_SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    depends_on:
      - postgres
      - redis
    profiles: ["observability"]

  postgres:
    <<: *common-env
    image: postgres:15-alpine
    container_name: langfuse-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    profiles: ["observability"]
