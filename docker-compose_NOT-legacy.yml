# docker-compose.yml - Workspace-in-a-Box - Vollst√§ndige Integration
# Alle Original-Services + Desktop + Editor-Integration

include:
  - ./supabase/docker/docker-compose.yml

version: "3.8"

networks:
  localai:
    driver: bridge
    name: localai
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Core AI Stack
  n8n_storage:
  ollama_storage:
  qdrant_storage:
  open_webui_data:
  flowise_data:

  # Desktop Environment
  desktop_home:
  desktop_config:
  guacamole_postgres_data:
  desktop_shared:

  # Productivity Stack
  appflowy_data:
  affine_data:
  
  # Development Stack
  gitlab_config:
  gitlab_logs:
  gitlab_data:
  gitlab_postgres_data:

  # Infrastructure
  caddy_data:
  caddy_config:
  valkey_data:
  searxng_data:

  # Langfuse Stack
  langfuse_postgres_data:
  langfuse_clickhouse_data:
  langfuse_clickhouse_logs:
  langfuse_minio_data:

x-common-env: &common-env
  networks:
    - localai
  restart: unless-stopped

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=db
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=postgres
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    - WEBHOOK_URL=${N8N_HOSTNAME:+https://}${N8N_HOSTNAME:-http://localhost:5678}
    - GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-Europe/Berlin}

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  restart: unless-stopped
  environment:
    - OLLAMA_CONTEXT_LENGTH=8192
    - OLLAMA_HOST=0.0.0.0
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull qwen2.5:7b-instruct-q4_K_M; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"

services:
  # ===== BROWSER GATEWAY =====
  guacamole-db:
    <<: *common-env
    image: postgres:15-alpine
    container_name: guacamole-db
    environment:
      POSTGRES_DB: guacamole_db
      POSTGRES_USER: guacamole_user
      POSTGRES_PASSWORD: ${GUAC_POSTGRES_PASSWORD}
    volumes:
      - guacamole_postgres_data:/var/lib/postgresql/data
      - ./guacamole/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U guacamole_user -d guacamole_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["desktop"]

  guacd:
    <<: *common-env
    image: guacamole/guacd:latest
    container_name: guacd
    profiles: ["desktop"]

  guacamole:
    <<: *common-env
    image: guacamole/guacamole:latest
    container_name: guacamole
    depends_on:
      guacd:
        condition: service_started
      guacamole-db:
        condition: service_healthy
    environment:
      GUACD_HOSTNAME: guacd
      POSTGRES_HOSTNAME: guacamole-db
      POSTGRES_DATABASE: guacamole_db
      POSTGRES_USER: guacamole_user
      POSTGRES_PASSWORD: ${GUAC_POSTGRES_PASSWORD}
    ports:
      - "8080:8080"
    profiles: ["desktop"]

  # ===== ENHANCED DESKTOP ENVIRONMENT =====
  desktop:
    <<: *common-env
    build:
      context: ./desktop
      dockerfile: Dockerfile.desktop
      args:
        - SELECTED_EDITOR=${SELECTED_EDITOR:-zed}
    container_name: desktop
    environment:
      VNC_PW: ${DESKTOP_PASSWORD:-password}
      KASM_PORT: 6901
      KASM_RX_HOME: /home/kasm-user
      DEBIAN_FRONTEND: noninteractive
      TZ: ${DESKTOP_TIMEZONE:-Europe/Berlin}
      LANG: de_DE.UTF-8
      SELECTED_EDITOR: ${SELECTED_EDITOR:-zed}
    volumes:
      - desktop_home:/home/kasm-user
      - desktop_config:/home/kasm-user/.config
      - ./desktop-shared:/shared
      - ./desktop/editor-config:/shared/editor-config:ro
      - ./desktop/projects:/home/kasm-user/Projects
      - ./desktop/scripts:/home/kasm-user/Scripts
      - ./shared:/data/shared
    shm_size: 4gb
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    profiles: ["desktop"]
    depends_on:
      - n8n
      - open-webui
      - ollama

  # ===== CORE AI SERVICES =====
  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    profiles: ["cpu", "gpu-nvidia", "gpu-amd"]

  n8n:
    <<: *service-n8n
    container_name: n8n
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      n8n-import:
        condition: service_completed_successfully
    profiles: ["cpu", "gpu-nvidia", "gpu-amd"]

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd

  open-webui:
    <<: *common-env
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open_webui_data:/app/backend/data
    environment:
      OLLAMA_BASE_URL: http://ollama:11434
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY:-default-secret}
      WEBUI_AUTH: "True"
      ENABLE_SIGNUP: "True"
      ENABLE_RAG_WEB_SEARCH: "True"
      ENABLE_RAG_WEB_LOADER: "True"
    depends_on:
      - ollama
    profiles: ["cpu", "gpu-nvidia", "gpu-amd"]

  qdrant:
    <<: *common-env
    image: qdrant/qdrant
    container_name: qdrant
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    profiles: ["cpu", "gpu-nvidia", "gpu-amd"]

  # ===== FLOWISE - NO-CODE AI WORKFLOWS =====
  flowise:
    <<: *common-env
    image: flowiseai/flowise
    container_name: flowise
    environment:
        PORT: 3001
        FLOWISE_USERNAME: ${FLOWISE_USERNAME}
        FLOWISE_PASSWORD: ${FLOWISE_PASSWORD}  
    ports:
        - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"        
    volumes:
        - flowise_data:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"
    profiles: ["productivity"]

  # ===== SEARXNG - META SEARCH ENGINE =====
  searxng:
    <<: *common-env
    image: docker.io/searxng/searxng:latest
    container_name: searxng
    ports:
      - 8081:8080
    volumes:
      - ./searxng:/etc/searxng:rw
      - searxng_data:/var/lib/searxng
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_HOSTNAME:-localhost}/
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    profiles: ["productivity"]

  # ===== CADDY REVERSE PROXY =====
  caddy:
    <<: *common-env
    container_name: caddy
    image: docker.io/library/caddy:2-alpine
    network_mode: host
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data:rw
      - caddy_config:/config:rw
    environment:
      - N8N_HOSTNAME=${N8N_HOSTNAME:-":5678"}
      - WEBUI_HOSTNAME=${WEBUI_HOSTNAME:-":3000"}
      - FLOWISE_HOSTNAME=${FLOWISE_HOSTNAME:-":3001"}
      - OLLAMA_HOSTNAME=${OLLAMA_HOSTNAME:-":11434"}
      - SUPABASE_HOSTNAME=${SUPABASE_HOSTNAME:-":8000"}
      - SEARXNG_HOSTNAME=${SEARXNG_HOSTNAME:-":8081"}
      - LANGFUSE_HOSTNAME=${LANGFUSE_HOSTNAME:-":3002"}
      - GUACAMOLE_HOSTNAME=${GUACAMOLE_HOSTNAME:-":8080"}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-internal}
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    profiles: ["production"]

  # ===== LANGFUSE OBSERVABILITY =====
  langfuse-worker:
    <<: *common-env
    image: langfuse/langfuse-worker:3
    container_name: langfuse-worker
    depends_on: &langfuse-depends-on
      postgres:
        condition: service_healthy    
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    ports:
      - 127.0.0.1:3030:3030
    environment: &langfuse-worker-env
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      SALT: ${LANGFUSE_SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}
      CLICKHOUSE_MIGRATION_URL: ${CLICKHOUSE_MIGRATION_URL:-clickhouse://clickhouse:9000}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-http://clickhouse:8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX:-events/}
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${LANGFUSE_S3_MEDIA_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION:-auto}
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: ${LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: ${LANGFUSE_S3_MEDIA_UPLOAD_PREFIX:-media/}
      LANGFUSE_S3_BATCH_EXPORT_ENABLED: ${LANGFUSE_S3_BATCH_EXPORT_ENABLED:-false}
      LANGFUSE_S3_BATCH_EXPORT_BUCKET: ${LANGFUSE_S3_BATCH_EXPORT_BUCKET:-langfuse}
      LANGFUSE_S3_BATCH_EXPORT_PREFIX: ${LANGFUSE_S3_BATCH_EXPORT_PREFIX:-exports/}
      LANGFUSE_S3_BATCH_EXPORT_REGION: ${LANGFUSE_S3_BATCH_EXPORT_REGION:-auto}
      LANGFUSE_S3_BATCH_EXPORT_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID: ${LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE: ${LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE:-true}
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ${LANGFUSE_INGESTION_QUEUE_DELAY_MS:-}
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ${LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS:-}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_AUTH: ${REDIS_AUTH:-LOCALONLYREDIS}
      REDIS_TLS_ENABLED: ${REDIS_TLS_ENABLED:-false}
      REDIS_TLS_CA: ${REDIS_TLS_CA:-/certs/ca.crt}
      REDIS_TLS_CERT: ${REDIS_TLS_CERT:-/certs/redis.crt}
      REDIS_TLS_KEY: ${REDIS_TLS_KEY:-/certs/redis.key}
    profiles: ["observability"]

  langfuse-web:
    <<: *common-env
    image: langfuse/langfuse:3
    container_name: langfuse
    depends_on: *langfuse-depends-on
    ports:
      - 3002:3000
    environment:
      <<: *langfuse-worker-env
      NEXTAUTH_URL: http://localhost:3002
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-}
    profiles: ["observability"]

  clickhouse:
    <<: *common-env
    image: clickhouse/clickhouse-server
    container_name: clickhouse
    user: "101:101"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    ports:
      - 127.0.0.1:8123:8123
      - 127.0.0.1:9000:9000
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s
    profiles: ["observability"]

  minio:
    <<: *common-env
    image: minio/minio
    container_name: minio
    entrypoint: sh
    command: -c 'mkdir -p /data/langfuse && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - 9090:9000
      - 127.0.0.1:9091:9001
    volumes:
      - langfuse_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s
    profiles: ["observability"]

  postgres:
    <<: *common-env
    image: postgres:${POSTGRES_VERSION:-latest}
    container_name: langfuse-postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    ports:
      - 127.0.0.1:5433:5432
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data
    profiles: ["observability"]

  redis:
    <<: *common-env
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    volumes:
      - valkey_data:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10
    profiles: ["productivity", "development", "observability"]

  # ===== PRODUCTIVITY STACK =====
  appflowy:
    <<: *common-env
    image: appflowyinc/appflowy:latest
    container_name: appflowy
    ports:
      - "8082:8080"
    environment:
      APPFLOWY_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/appflowy
    volumes:
      - appflowy_data:/data
    depends_on:
      - db
    profiles: ["productivity"]

  affine:
    <<: *common-env
    image: ghcr.io/toeverything/affine-graphql:stable
    container_name: affine
    ports:
      - "3010:3010"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/affine
      REDIS_SERVER_HOST: redis
      REDIS_SERVER_PORT: 6379
      AFFINE_SERVER_HOST: 0.0.0.0
      AFFINE_SERVER_PORT: 3010
    volumes:
      - affine_data:/workspace
    depends_on:
      - db
      - redis
    profiles: ["productivity"]

  # ===== DEVELOPMENT STACK =====
  gitlab-postgres:
    <<: *common-env
    image: postgres:15-alpine
    container_name: gitlab-postgres
    environment:
      POSTGRES_DB: ${GITLAB_POSTGRES_DB}
      POSTGRES_USER: ${GITLAB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${GITLAB_POSTGRES_PASSWORD}
    volumes:
      - gitlab_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${GITLAB_POSTGRES_USER} -d ${GITLAB_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["development"]

  gitlab:
    <<: *common-env
    image: gitlab/gitlab-ce:16.8.1-ce.0
    container_name: gitlab
    hostname: gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab:8083'
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
        letsencrypt['enable'] = false
        unicorn['worker_processes'] = 2
        sidekiq['max_concurrency'] = 10
        gitlab_rails['webhook_timeout'] = 30
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
    ports:
      - "8083:8083"
      - "2222:22"
    shm_size: 256m
    depends_on:
      gitlab-postgres:
        condition: service_healthy
    profiles: ["development"]
